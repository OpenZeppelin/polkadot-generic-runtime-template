//! Autogenerated weights for pallet_multisig
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 3.0.0
//! DATE: 2021-05-31, STEPS: `[50, ]`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE:
//! `[]` EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN:
//! Some("statemine-dev"), DB CACHE: 128

// Executed Command:
// ./target/release/statemint
// benchmark
// --chain=statemine-dev
// --execution=wasm
// --wasm-execution=compiled
// --pallet=pallet_multisig
// --extrinsic=*
// --steps=50
// --repeat=20
// --raw
// --output=./runtime/statemine/src/weights/

#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weight functions for pallet_multisig.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_multisig::WeightInfo for WeightInfo<T> {
    fn as_multi_threshold_1(z: u32) -> Weight {
        Weight::from(15_911_000)
            // Standard Error: 0
            .saturating_add((Weight::from(1_000)).saturating_mul(z.into()))
    }

    fn as_multi_create(s: u32, z: u32) -> Weight {
        Weight::from(55_326_000)
            // Standard Error: 0
            .saturating_add(Weight::from(133_000).saturating_mul(s.into()))
            // Standard Error: 0
            .saturating_add(Weight::from(1_000).saturating_mul(z.into()))
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(1))
    }

    fn as_multi_approve(s: u32, z: u32) -> Weight {
        Weight::from(32_430_000)
            // Standard Error: 0
            .saturating_add(Weight::from(148_000).saturating_mul(s.into()))
            // Standard Error: 0
            .saturating_add(Weight::from(1_000).saturating_mul(z.into()))
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(1))
    }

    fn as_multi_complete(s: u32, z: u32) -> Weight {
        Weight::from(80_926_000)
            // Standard Error: 0
            .saturating_add(Weight::from(276_000).saturating_mul(s.into()))
            // Standard Error: 0
            .saturating_add(Weight::from(5_000).saturating_mul(z.into()))
            .saturating_add(T::DbWeight::get().reads(3))
            .saturating_add(T::DbWeight::get().writes(3))
    }

    fn approve_as_multi_create(s: u32) -> Weight {
        Weight::from(54_860_000)
            // Standard Error: 0
            .saturating_add(Weight::from(134_000).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(1))
    }

    fn approve_as_multi_approve(s: u32) -> Weight {
        Weight::from(31_924_000)
            // Standard Error: 0
            .saturating_add(Weight::from(154_000).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(1))
    }

    fn cancel_as_multi(s: u32) -> Weight {
        Weight::from(103_770_000)
            // Standard Error: 0
            .saturating_add(Weight::from(130_000).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(2))
    }
}
